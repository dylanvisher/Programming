#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.2 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 28 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 15 #"test-case-box%\0"
2 0 1 6 #"wxloc\0"
          0 0 304 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 11 #" Monospace\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 1 #"\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 148 0 211 0
0 0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 22 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 22 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 22 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 19 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 20 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 24 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 10 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 10 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 4 32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 88 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 190 190 190
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 107 142 35 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 100 149 237
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 70 130 180 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 47 79 79 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 139 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 75 0 130 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 160 32 240 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 250 128 114
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 184 134 11 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 128 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 169 169 169
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 1 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
228 225 -1 -1 87 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 134 0 0 0 0
0 -1 -1 0 1 #"\0"
0 75 9 #"Consolas\0"
0.0 13 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 38 #"drscheme:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
28 #"drscheme:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 31
#"drscheme:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 8 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 8 24 #"drscheme:text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 0 1 #"\0"
0 75 1 #"\0"
0.0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 11 #" Monospace\0"
0.0 11 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 41 #"profj:syntax-colors:scheme:block-comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
35 #"profj:syntax-colors:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 139 0
0 0 -1 -1 2 37 #"profj:syntax-colors:scheme:prim-type\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 139 0
0 0 -1 -1 2 38 #"profj:syntax-colors:scheme:identifier\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 34
#"profj:syntax-colors:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:literal\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
33 #"profj:syntax-colors:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:default\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 37
#"profj:syntax-colors:scheme:uncovered\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 35
#"profj:syntax-colors:scheme:covered\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 139 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 107 142 35 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 100 149 237
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 70 130 180 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 47 79 79 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 139 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 75 0 130 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 160 32 240 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 165 0 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 250 128 114
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 184 134 11 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 128 0 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 169 169 169
0 0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
228 225 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 1 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 0 0 224
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 224
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 0 0 255
228 225 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 255 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 255 224
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 255 255
228 225 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 107 142 35
255 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 107 142 35
224 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 107 142 35
255 228 225 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 100 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 100 0 224
255 255 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 1 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 1 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 255 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 100 0 255
228 225 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 139 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 139 0 0 224
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 139 0 0 255
228 225 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 1 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 139 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 100 149 237
255 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 100 149 237
224 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 65 105 225
255 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 65 105 225
224 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 70 130 180
255 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 70 130 180
224 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 70 130 180
255 228 225 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 47 79 79 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 47 79 79 224
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 139 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 139 224
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 139 255
228 225 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 75 0 130 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 75 0 130 224
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 75 0 130 255
228 225 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 160 32 240
255 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 160 32 240
224 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 160 32 240
255 228 225 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 1 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 160 32 240
255 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0
255 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0
224 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 250 128 114
255 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 250 128 114
224 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 184 134 11
255 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 184 134 11
224 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 184 134 11
255 228 225 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 128 128 0
255 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 128 128 0
224 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 128 128 0
255 228 225 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 169 169 169
255 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 169 169 169
224 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 1 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 169 169 169
255 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 1 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 107 142 35
255 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 1 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 100 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 1 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 47 79 79 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 1 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 250 128 114
255 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 1 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 184 134 11
255 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 100 149 237
255 228 225 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 1 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 100 149 237
255 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 47 79 79 255
228 225 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0
255 228 225 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 1 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0
255 255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 92 -1 -1 -1 -1 1 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 128 128 0
255 255 255 -1 -1 2 40 #"framework:syntax-coloring:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 41
#"framework:syntax-coloring:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 41
#"framework:syntax-coloring:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
40 #"framework:syntax-coloring:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 42
#"framework:syntax-coloring:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 45
#"framework:syntax-coloring:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 39
#"framework:syntax-coloring:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 39
#"framework:syntax-coloring:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 49
#"drscheme:check-syntax:lexically-bound-identifier\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
42 #"drscheme:check-syntax:imported-identifier\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 37
#"profj:syntax-coloring:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"profj:syntax-coloring:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"profj:syntax-coloring:scheme:literal\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"profj:syntax-coloring:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
35 #"profj:syntax-coloring:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 40
#"profj:syntax-coloring:scheme:identifier\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"profj:syntax-coloring:scheme:default\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 75 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 2 42 #"javascript:syntax-coloring:scheme:keyword\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 160 32 240 0
0 0 -1 -1 2 46 #"javascript:syntax-coloring:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 41
#"javascript:syntax-coloring:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 42
#"javascript:syntax-coloring:scheme:literal\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 42
#"javascript:syntax-coloring:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
40 #"javascript:syntax-coloring:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 45
#"javascript:syntax-coloring:scheme:identifier\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 42
#"javascript:syntax-coloring:scheme:default\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 70 1 #"\0"
2.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 -2 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 -2 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 50 205 50 0
0 0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 70 1 #"\0"
1.5 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 70 1 #"\0"
1.5 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 2 1 #"\0"
0 75 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 2 1 #"\0"
0 75 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 2 1 #"\0"
0 75 1 #"\0"
2.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 1.0 1.0 1.0 0.0 0.0 0.0 0 0 0 208
160 208 -1 -1 2 1 #"\0"
0 75 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 1.0 1.0 1.0 0.0 0.0 0.0 0 0 0 208
160 208 -1 -1 2 1 #"\0"
0 75 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 1.0 1.0 1.0 0.0 0.0 0.0 0 0 0 208
160 208 -1 -1 2 1 #"\0"
0 75 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
2.0 0 92 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 2 1 #"\0"
0 75 1 #"\0"
2.0 0 92 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 2 1 #"\0"
0 75 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 1 #"\0"
0 75 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 153 0 0 0 0
0 -1 -1 2 1 #"\0"
0 75 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 36 36 140 0
0 0 -1 -1 2 1 #"\0"
0 75 1 #"\0"
0.8 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 0 -1 2 1 #"\0"
0 75 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 34 139 34 0
0 0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.5 0 92 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 2 1 #"\0"
0 75 1 #"\0"
0.8 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 36 36 140 0
0 0 1 -1 2 1 #"\0"
0 75 1 #"\0"
0.8 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 36 36 140 0
0 0 1 -1 2 1 #"\0"
0 70 1 #"\0"
0.8 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
1 -1 2 1 #"\0"
0 70 1 #"\0"
0.8 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
1 -1 2 1 #"\0"
0 70 1 #"\0"
0.75 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 2 1 #"\0"
0 75 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 75 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 34 139 34 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 70 1 #"\0"
1.2 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 70 1 #"\0"
1.2 0 92 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
0.8 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 0 -1 2 1 #"\0"
0 70 1 #"\0"
0.6000000000000001 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0
1.0 0 0 255 0 0 0 0 -1 2 1 #"\0"
0 75 1 #"\0"
1.2 0 92 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 1 #"\0"
0 75 1 #"\0"
1.2 0 92 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 36 36 140 0
0 0 -1 -1 2 1 #"\0"
0 75 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 1 #"\0"
0 75 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 36 36 140 0
0 0 -1 -1 2 1 #"\0"
0 75 1 #"\0"
1.2 0 92 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 153 0 0 0 0
0 -1 -1 2 1 #"\0"
0 75 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 68 64 108 0
0 0 -1 -1 2 1 #"\0"
0 75 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 68 64 108 0
0 0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
0.8 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
0 -1 2 1 #"\0"
0 75 1 #"\0"
0.8 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 36 36 140 0
0 0 0 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 94 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 2 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 2 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 2 1 #"\0"
0 70 1 #"\0"
1.0 2 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1 2 1 #"\0"
0 75 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 12 -1 -1 -1 -1 -1 -1 0 0 1 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1           0 4383 0 26 3 12 #"#lang racket"
0 0 4 29 1 #"\n"
0 0 17 3 33 #"; a matrix is a vector of vectors"
0 0 4 29 1 #"\n"
0 0 17 3 26 #";(require \"equations.scm\")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"require"
0 0 4 3 1 #" "
0 0 14 3 4 #"plot"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"provide"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"all-defined-out"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 7        1981 4           0 0           0 329 0 17 3 8 #";A*x = B"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 1 #"A"
0 0 2 3 1 #" "
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 22 3 2 #"#("
0 0 20 3 1 #"9"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 1 #"B"
0 0 2 3 1 #" "
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"8"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 1 #"C"
0 0 2 3 1 #" "
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"5"
0 0 2 3 1 #" "
0 0 20 3 1 #"7"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 22 3 2 #"#("
0 0 20 3 1 #"3"
0 0 2 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 17 3 28 #";D and E are on col 2 so far"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 1 #"D"
0 0 2 3 1 #" "
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 20 3 1 #"3"
0 0 2 3 1 #" "
0 0 20 3 1 #"6"
0 0 2 3 1 #" "
0 0 20 3 1 #"9"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"9"
0 0 2 3 1 #" "
0 0 20 3 1 #"7"
0 0 2 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 17 3 32 #";has a bigger one above diagonal"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"7"
0 0 2 3 1 #" "
0 0 20 3 1 #"9"
0 0 2 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"4"
0 0 2 3 1 #" "
0 0 20 3 1 #"8"
0 0 2 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"8"
0 0 2 3 1 #" "
0 0 20 3 1 #"9"
0 0 2 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 3 #")))"
0 0 2 3 1 #" "
0 0 17 3 27 #";has largest after diagonal"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 1 #"E"
0 0 2 3 1 #" "
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 20 3 1 #"3"
0 0 2 3 1 #" "
0 0 20 3 1 #"6"
0 0 2 3 1 #" "
0 0 20 3 1 #"9"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"9"
0 0 2 3 1 #" "
0 0 20 3 1 #"7"
0 0 2 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 17 3 32 #";has a bigger one above diagonal"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 2 #"10"
0 0 2 3 1 #" "
0 0 20 3 1 #"9"
0 0 2 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 17 3 25 #";has largest as diagonal "
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"4"
0 0 2 3 1 #" "
0 0 20 3 1 #"8"
0 0 2 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"8"
0 0 2 3 1 #" "
0 0 20 3 1 #"9"
0 0 2 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 1 #"F"
0 0 2 3 1 #" "
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 20 3 1 #"3"
0 0 2 3 1 #" "
0 0 20 3 1 #"6"
0 0 2 3 1 #" "
0 0 20 3 1 #"9"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"9"
0 0 2 3 1 #" "
0 0 20 3 1 #"7"
0 0 2 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 17 3 32 #";has a bigger one above diagonal"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"7"
0 0 2 3 1 #" "
0 0 20 3 1 #"9"
0 0 2 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 2 #"10"
0 0 2 3 1 #" "
0 0 20 3 1 #"8"
0 0 2 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 17 3 30 #";has largest as second-to-last"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"8"
0 0 2 3 1 #" "
0 0 20 3 1 #"9"
0 0 2 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 1 #"H"
0 0 2 3 1 #" "
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 14 3 1 #"J"
0 0 2 3 1 #" "
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 22 3 2 #"#("
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 12 #"            "
0 0 22 3 2 #"#("
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #")))"
0           0 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"display-matrix"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"display"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"display"
0 0 4 3 1 #" "
0 0 19 3 4 #"\"\\t\""
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"display"
0 0 19 3 4 #"\"\\n\""
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 68
#";~~~GETTERS~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 35 #";get-row: matrix num -> vector(num)"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"get-row"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 14 3 3 #"row"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 14 3 3 #"row"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 14 #";(get-row D 2)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 23 #";get-col: matrix num-> "
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"get-col"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 14 3 3 #"col"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 3 #"col"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 14 #";(get-col D 2)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 30 #";get-num: matrix num num-> num"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"get-num"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 14 3 3 #"row"
0 0 4 3 1 #" "
0 0 14 3 3 #"col"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"get-row"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 14 3 3 #"row"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"col"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 16 #";(get-num D 2 2)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 68
#";~~~MULT~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 41 #";*mcreate-num: list(num) list(num) -> num"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"*mcreate-num"
0 0 4 3 1 #" "
0 0 14 3 4 #"row1"
0 0 4 3 1 #" "
0 0 14 3 4 #"col2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 5 #"apply"
0 0 4 3 1 #" "
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"vector->list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-map"
0 0 4 3 1 #" "
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 4 #"row1"
0 0 4 3 1 #" "
0 0 14 3 4 #"col2"
0 0 22 3 4 #"))))"
0 0 4 3 1 #" "
0 0 17 3 41 #";UH thats a hit to my stomach >.< ah well"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 7         505 4           0 0           0 83 0 17 3 7 #";slower"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"transpose"
0 0 2 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-map"
0 0 2 29 1 #"\n"
0 0 2 3 3 #"   "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-map"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 2 3 1 #" "
0 0 14 3 1 #"m"
0 0 2 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 12 #"build-vector"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-length"
0 0 2 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 6 #"values"
0 0 22 3 3 #")))"
0 0 2 3 1 #" "
0 0 17 3 15 #";this is bad..."
0 0 2 29 1 #"\n"
0 0 2 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 12 #"build-vector"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-length"
0 0 2 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 14 3 6 #"values"
0 0 22 3 3 #")))"
0 0 2 3 1 #" "
0 0 17 3 15 #";this is bad..."
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 9 #"transpose"
0 0 2 3 1 #" "
0 0 14 3 1 #"D"
0 0 22 3 1 #")"
0           0 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 28 #";transpose: matrix -> matrix"
0 0 4 29 1 #"\n"
0 0 17 3 43 #";takes a matrix and flips the rows and cols"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"transpose"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 12 #"build-vector"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-length"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 3 #"col"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 17 3 36 #";I'm actually not certain as to how "
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 12 #"build-vector"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-length"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 3 #"row"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 7 #"get-num"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 14 3 3 #"row"
0 0 4 3 1 #" "
0 0 14 3 3 #"col"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 17 3 14 #";(transpose D)"
0 0 4 29 1 #"\n"
0 0 17 3 36 #";(transpose #(#(3 1) #(2 1) #(1 0)))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 53 #";*mcreate-row: list(num) list(list(num)) -> list(num)"
0 0 4 29 1 #"\n"
0 0 17 3 49 #";need to run for every column in m2... this sucks"
0 0 4 29 1 #"\n"
0 0 17 3 44 #";i think i *have* to transpose. this is ugly"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"*mcreate-row"
0 0 4 3 1 #" "
0 0 14 3 4 #"row1"
0 0 4 3 1 #" "
0 0 14 3 2 #"m2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-map"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 4 #"col2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"*mcreate-num"
0 0 4 3 1 #" "
0 0 14 3 4 #"row1"
0 0 4 3 1 #" "
0 0 14 3 4 #"col2"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 9 #"transpose"
0 0 4 3 1 #" "
0 0 14 3 2 #"m2"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 17 3 19 #";this would be slow"
0 0 4 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 12 #"*mcreate-row"
0 0 17 3 43 #" #(1 0 2) #(#(3 1) #(2 1) #(1 0))) ; '(5 1)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 28 #";*m: matrix matrix -> matrix"
0 0 4 29 1 #"\n"
0 0 17 3 22 #";must be the same size"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"*m"
0 0 4 3 1 #" "
0 0 14 3 2 #"m1"
0 0 4 3 1 #" "
0 0 14 3 2 #"m2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 4 #"row1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"*mcreate-row"
0 0 4 3 1 #" "
0 0 14 3 4 #"row1"
0 0 4 3 1 #" "
0 0 14 3 2 #"m2"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 2 #"m1"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 2 #"*m"
0 0 17 3 1 #" "
0 0 17 3 4 #"#(#("
0 0 17 3 54 #"8 9) #(5 -1)) #(#(-2 3) #(4 0))) ; '((20 24) (-14 15))"
0 0 4 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 2 #"*m"
0 0 17 3 1 #" "
0 0 17 3 4 #"#(#("
0 0 17 3 1 #"3"
0 0 17 3 1 #" "
0 0 17 3 2 #"-1"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 3 #"#(1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 2 #"#("
0 0 17 3 1 #"6"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 2 #"))"
0 0 17 3 1 #" "
0 0 17 3 4 #"#(#("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 2 #"-1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 2 #"#("
0 0 17 3 1 #"4"
0 0 17 3 1 #" "
0 0 17 3 2 #"11"
0 0 17 3 1 #" "
0 0 17 3 38 #"2))) ; '((-4 -14 4) (8 21 6) (4 5 14))"
0 0 4 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 2 #"*m"
0 0 17 3 1 #" "
0 0 17 3 4 #"#(#("
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 2 #"-1"
0 0 17 3 1 #" "
0 0 17 3 1 #"2"
0 0 17 3 1 #")"
0 0 17 3 3 #" #("
0 0 17 3 1 #"4"
0 0 17 3 1 #" "
0 0 17 3 2 #"11"
0 0 17 3 1 #" "
0 0 17 3 49 #"2)) #(#(3 -1) #(1 2) #(6 1))) ; '((11 0) (35 20))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 53 #";vector-copy for swap -> i dont think that would work"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 68
#";~~~TRIANGULARIZE~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 91
(
 #";3 ways: either use default function to find max, go through like ja"
 #"va loop, or use get-col"
) 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 7 #";WAY #1"
0 0 4 29 1 #"\n"
0 0 17 3 18 #";(define (max m i)"
0 0 4 29 1 #"\n"
0 0 17 3 3 #";  "
0 0 17 3 1 #"("
0 0 17 3 4 #"let "
0 0 17 3 6 #"((maxi"
0 0 17 3 4 #"mum "
0 0 17 3 1 #"("
0 0 17 3 10 #"vector-ref"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 13 #"vector-argmax"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 6 #"lambda"
0 0 17 3 1 #"("
0 0 17 3 3 #"row"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 59
#"vector-ref row i)) (vector-drop m i)) i))) ;gets max of row"
0 0 4 29 1 #"\n"
0 0 17 3 14 #";    maximum))"
0 0 4 29 1 #"\n"
0 0 17 3 10 #";(max D 2)"
0 0 4 29 1 #"\n"
0 0 17 3 10 #";(max E 2)"
0 0 4 29 1 #"\n"
0 0 17 3 46 #";(define (maxi matrix i current-index maximum)"
0 0 4 29 1 #"\n"
0 0 17 3 8 #";  (cond"
0 0 4 29 1 #"\n"
0 0 17 3 31 #";    [(= (get-num matrix i))]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 7 #";WAY #3"
0 0 4 29 1 #"\n"
0 0 17 3 27 #";lets do get-col -> simpler"
0 0 4 29 1 #"\n"
0 0 17 3 47 #";U REFERS TO UPPER TRIANGLE (first way through)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 26 #";get-maxi: vector i -> num"
0 0 4 29 1 #"\n"
0 0 17 3 106
(
 #";gets the index for just the cut up column (maxi will add i onto tha"
 #"t so that it works for the whole thing"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"get-maxi"
0 0 4 3 1 #" "
0 0 14 3 3 #"col"
0 0 4 3 1 #" "
0 0 14 3 13 #"current-index"
0 0 4 3 1 #" "
0 0 14 3 7 #"maximum"
0 0 4 3 1 #" "
0 0 14 3 14 #"greatest-index"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 2 #">="
0 0 4 3 1 #" "
0 0 14 3 13 #"current-index"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-length"
0 0 4 3 1 #" "
0 0 14 3 3 #"col"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 14 #"greatest-index"
0 0 22 3 1 #"]"
0 0 4 3 1 #" "
0 0 17 3 22 #";at end, return answer"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 1 #">"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 3 #"col"
0 0 4 3 1 #" "
0 0 14 3 13 #"current-index"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 7 #"maximum"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 17 3 29 #";if the current one is larger"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 8 #"get-maxi"
0 0 4 3 1 #" "
0 0 14 3 3 #"col"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 4 3 1 #" "
0 0 14 3 13 #"current-index"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 3 #"col"
0 0 4 3 1 #" "
0 0 14 3 13 #"current-index"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 13 #"current-index"
0 0 22 3 2 #")]"
0 0 4 3 1 #" "
0 0 17 3 15 #";then make the "
0 0 17 3 17 #"greatest-index = "
0 0 17 3 8 #"current "
0 0 17 3 28 #"index and change the maximum"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"get-maxi"
0 0 4 3 1 #" "
0 0 14 3 3 #"col"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 4 3 1 #" "
0 0 14 3 13 #"current-index"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 7 #"maximum"
0 0 4 3 1 #" "
0 0 14 3 14 #"greatest-index"
0 0 22 3 4 #")]))"
0 0 4 3 1 #" "
0 0 17 3 31 #";else just try with the new one"
0 0 4 29 1 #"\n"
0 0 17 3 33 #";(get-maxi #(2 3 1 4 10 2) 0 0 0)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 24 #";maxi: matrix num -> num"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"maxi"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 3 #"col"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"get-col"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 27 #";(begin (display \"\\ncol: \")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 21 #";       (display col)"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 25 #";       (display \"; i: \")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 19 #";       (display i)"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 32 #";       (display \"; get-maxi: \")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 54 #";       (display (get-maxi (vector-drop col i) 0 0 0))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 28 #";       (display \"; maxi: \")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 60
#";       (display (+ i (get-maxi (vector-drop col i) 0 0 0)))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 22 #";       (display \"\\n\")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"get-maxi"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"vector-drop"
0 0 4 3 1 #" "
0 0 14 3 3 #"col"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 4 #"))))"
0 0 17 3 2 #";)"
0 0 4 29 1 #"\n"
0 0 17 3 11 #";(maxi D 2)"
0 0 4 29 1 #"\n"
0 0 17 3 11 #";(maxi E 2)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"switch-with-max"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 17 3 63
#";i=what col its currently on, and thus (add1 i) is the diagonal"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 9 #"max-index"
0 0 4 3 1 #" "
0 0 17 3 19 #";(begin (display i)"
0 0 4 29 1 #"\n"
0 0 4 3 26 #"                          "
0 0 22 3 1 #"("
0 0 14 3 4 #"maxi"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 3 #")))"
0 0 17 3 2 #";)"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"[("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 14 3 9 #"max-index"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-append"
0 0 4 3 1 #" "
0 0 17 3 72
(
 #";UG HOW(*RYHUGEWRUIHFKSHg ANGRY IT NEEDS TO BE PRETTIER..... but idk"
 #" how"
) 0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 11 #"vector-take"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 6 #"vector"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 14 3 9 #"max-index"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 11 #"vector-drop"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"vector-take"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 14 3 9 #"max-index"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 6 #"vector"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 11 #"vector-drop"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 4 3 1 #" "
0 0 14 3 9 #"max-index"
0 0 22 3 7 #")))])))"
0 0 4 29 1 #"\n"
0 0 17 3 2 #";D"
0 0 4 29 1 #"\n"
0 0 17 3 22 #";(switch-with-max D 2)"
0 0 4 29 1 #"\n"
0 0 17 3 22 #";(switch-with-max D 4)"
0 0 4 29 1 #"\n"
0 0 17 3 2 #";E"
0 0 4 29 1 #"\n"
0 0 17 3 22 #";(switch-with-max E 2)"
0 0 4 29 1 #"\n"
0 0 17 3 2 #";F"
0 0 4 29 1 #"\n"
0 0 17 3 22 #";(switch-with-max F 2)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 36 #";divide-to-one: matrix num -> matrix"
0 0 4 29 1 #"\n"
0 0 17 3 46 #";divides the whole row by the value at (i, i) "
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"divide-to-one"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 7 #"dividor"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"get-num"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-append"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 11 #"vector-take"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 6 #"vector"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"/"
0 0 4 3 1 #" "
0 0 14 3 1 #"n"
0 0 4 3 1 #" "
0 0 14 3 7 #"dividor"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 14 3 11 #"vector-drop"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 17 3 20 #";(divide-to-one D 2)"
0 0 4 29 1 #"\n"
0 0 17 3 20 #";(divide-to-one E 2)"
0 0 4 29 1 #"\n"
0 0 17 3 20 #";(divide-to-one F 2)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 43 #";subtract-rows: vector vector num -> vector"
0 0 4 29 1 #"\n"
0 0 17 3 59
#";after making i's row turn into diagonalized, subtract the "
0 0 17 3 8 #"current "
0 0 17 3 4 #"row "
0 0 17 3 3 #"by "
0 0 17 3 31 #"scaled i's row (scaled so that "
0 0 17 3 8 #"the (k, "
0 0 17 3 7 #"i) num "
0 0 17 3 11 #"becomes 0, "
0 0 17 3 39 #"turning the entire col below 1 into 0s)"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"subtract-rows"
0 0 4 3 1 #" "
0 0 14 3 4 #"row1"
0 0 4 3 1 #" "
0 0 14 3 4 #"row2"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 17 3 16 #";row1 is i's row"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 10 #"multiplier"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"/"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 4 #"row2"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 4 #"row1"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 4 #"))))"
0 0 4 3 1 #" "
0 0 17 3 19 #";R_1*k=r_2 -> k=R/r"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 10 #"multiplier"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 14 3 4 #"row1"
0 0 4 3 1 #" "
0 0 14 3 4 #"row2"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 17 3 52 #";(subtract-rows #(0 0 0 1 4 6 8) #(0 0 0 5 2 6 9) 3)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 37 #";usubtract-rest: matrix num -> matrix"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"usubtract-rest"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-append"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 11 #"vector-take"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 17 3 17 #";includes i's row"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 3 #"row"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 13 #"subtract-rows"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"get-row"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"row"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 11 #"vector-drop"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 17 3 21 #";(usubtract-rest H 1)"
0 0 4 29 1 #"\n"
0 0 17 3 39 #";(usubtract-rest (divide-to-one D 2) 2)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 39 #";want to switch rows, then subract rest"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 33 #";ufind-triangle: matrix -> matrix"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"ufind-triangle"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 2 #">="
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-length"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"ufind-triangle"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"usubtract-rest"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"divide-to-one"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"switch-with-max"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 25 #"                         "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 5 #"))]))"
0 0 4 29 1 #"\n"
0 0 17 3 62
#"; i used this to test ufind-triangle when it wasn't resursive:"
0 0 4 29 1 #"\n"
0 0 17 3 21 #";(ufind-triangle D 0)"
0 0 4 29 1 #"\n"
0 0 17 3 40 #";(ufind-triangle (ufind-triangle D 0) 1)"
0 0 4 29 1 #"\n"
0 0 17 3 59
#";(ufind-triangle (ufind-triangle (ufind-triangle D 0) 1) 2)"
0 0 4 29 1 #"\n"
0 0 17 3 78
(
 #";(ufind-triangle (ufind-triangle (ufind-triangle (ufind-triangle D 0"
 #") 1) 2) 3)"
) 0 0 4 29 1 #"\n"
0 0 17 3 16 #";(ufind-triangle"
0 0 17 3 82
(
 #" (ufind-triangle (ufind-triangle (ufind-triangle (ufind-triangle D 0"
 #") 1) 2) 3) 4) "
) 0 0 4 29 1 #"\n"
0 0 17 3 32 #";(define M (ufind-triangle D 3))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 83
(
 #";even if I only tested on square matrices, it works perfectly on aug"
 #"mented matrices"
) 0 0 4 29 1 #"\n"
0 0 17 3 30 #";(define augmented #(#(1 -1 6)"
0 0 4 29 1 #"\n"
0 0 17 3 32 #";                    #(2 -3 1)))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 9 #"round-vec"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-map"
0 0 4 3 1 #" "
0 0 14 3 14 #"exact->inexact"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 41 #";(round-vec (ufind-triangle augmented 0))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 7          67 4           0 0           0 10 0 17 3 105
(
 #";(define m (build-vector 5000 (lambda(x) (build-vector 1000 (lambda("
 #"y) (* (sin (add1 x)) (tan y) 10))))))"
) 0 0 2 29 1 #"\n"
0 0 17 3 61
#";(define C (vector-map (lambda(row) (vector-ref row 500)) m))"
0 0 2 29 1 #"\n"
0 0 17 3 53 #";(time (vector-map (lambda(x) (vector-ref x 500)) m))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 51 #";(time (get-maxi C 0 0 0)) ;THIS IS FASTER (2 time)"
0 0 2 29 1 #"\n"
0 0 17 3 68
#";(time (find-index-of-max (apply max C) C)) ;THIS IS SLOWER (3 time)"
0           0 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 7 #";~~~inv"
0 0 17 3 57 #"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"I-row"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 4 #"size"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 12 #"build-vector"
0 0 4 3 1 #" "
0 0 14 3 4 #"size"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 17 3 12 #";(I-row 2 7)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 31 #";identity-matrix: num -> matrix"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"I"
0 0 4 3 1 #" "
0 0 14 3 4 #"size"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 12 #"build-vector"
0 0 4 3 1 #" "
0 0 14 3 4 #"size"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"I-row"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 4 #"size"
0 0 22 3 4 #"))))"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 49 #";combine-matrices: matrix matrix -> matrix<gauss>"
0 0 4 29 1 #"\n"
0 0 17 3 40 #";guass matrix = matrix + identity matrix"
0 0 4 29 1 #"\n"
0 0 17 3 65
#";tacks the second matrix onto the first, mushing the rows togeter"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"combine-matrices"
0 0 4 3 1 #" "
0 0 14 3 2 #"m1"
0 0 4 3 1 #" "
0 0 14 3 2 #"m2"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-append"
0 0 4 3 1 #" "
0 0 14 3 2 #"r1"
0 0 4 3 1 #" "
0 0 14 3 2 #"r2"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 2 #"m1"
0 0 4 3 1 #" "
0 0 14 3 2 #"m2"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 16 #"combine-matrices"
0 0 17 3 1 #" "
0 0 17 3 4 #"#(#("
0 0 17 3 30 #"5 6) #(7 8)) #(#(3 4) #(8 3)))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"gauss"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 16 #"combine-matrices"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"I"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-length"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"first-half"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 1 #"r"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"vector-take"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-length"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"second-half"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 1 #"r"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"vector-drop"
0 0 4 3 1 #" "
0 0 14 3 1 #"r"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-length"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 7        4684 4           0 0           0 366 0 17 3 43
#";inverse1st: matrix<gauss> -> matrix<gauss>"
0 0 2 29 1 #"\n"
0 0 17 3 24 #";first half of inversing"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"inverse1st"
0 0 2 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 17 3 30 #"; m is already combined with I"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"let*"
0 0 2 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 8 #"triangle"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"find-upper-triangle"
0 0 2 3 1 #" "
0 0 14 3 1 #"m"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 7 #"display"
0 0 2 3 1 #" "
0 0 19 3 19 #"\"combined(1st): \\n\""
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"display-matrix"
0 0 2 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"display"
0 0 2 3 1 #" "
0 0 19 3 4 #"\"\\n\""
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 7 #"display"
0 0 2 3 1 #" "
0 0 19 3 19 #"\"triangle(1st): \\n\""
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"display-matrix"
0 0 2 3 1 #" "
0 0 14 3 8 #"triangle"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"display"
0 0 2 3 1 #" "
0 0 19 3 4 #"\"\\n\""
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 6 #"      "
0 0 14 3 8 #"triangle"
0 0 22 3 3 #")))"
0 0 2 3 1 #" "
0 0 17 3 32 #";get the second half of each row"
0 0 2 29 1 #"\n"
0 0 17 3 46 #";(inverse (combine-matrices D (I (length D))))"
0 0 2 29 1 #"\n"
0 0 17 3 53 #";(*m D (inverse (combine-matrices D (I (length D)))))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 7         199 2           0 0           0 32 0 17 3 44
#";triangle(1st) for J:  (checked against web)"
0 0 2 29 1 #"\n"
0 0 22 3 2 #"#("
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 3 #"1/2"
0 0 2 3 1 #" "
0 0 20 3 3 #"1/2"
0 0 2 3 3 #"   "
0 0 14 3 20 #"|  1/2    0    0)  |"
0 0 2 29 1 #"\n"
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 2 3 2 #"  "
0 0 20 3 1 #"1"
0 0 2 3 2 #"  "
0 0 20 3 3 #"1/3"
0 0 2 3 3 #"   "
0 0 14 3 20 #"| -1/3   2/3   0)  |"
0 0 2 29 1 #"\n"
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 2 3 2 #"  "
0 0 20 3 1 #"0"
0 0 2 3 3 #"   "
0 0 20 3 1 #"1"
0 0 2 3 4 #"    "
0 0 14 3 20 #"| -1/4  -1/4  3/4) |"
0 0 2 29 1 #"\n"
0 0 17 3 88
(
 #";http://nptel.iitm.ac.in/courses/Webcourse-contents/IIT-KANPUR/mathe"
 #"matics-2/node27.html"
) 0 0 2 29 1 #"\n"
0 0 17 3 16 #";so far so right"
0           0 0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 7 #";WAY #2"
0 0 2 29 1 #"\n"
0 0 17 3 23 #";ONLY WORKS FOR SYMETRY"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"mirror-vector"
0 0 2 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 17 3 64
#";this is one of the ugliest programs i ever wrote, but it'l work"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 17 3 28 #";i need a reverse-vector NAO"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 9 #"transpose"
0 0 2 29 1 #"\n"
0 0 2 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 12 #"list->vector"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 2 3 1 #" "
0 0 14 3 12 #"list->vector"
0 0 2 29 1 #"\n"
0 0 2 3 22 #"                      "
0 0 22 3 1 #"("
0 0 14 3 7 #"reverse"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 2 3 1 #" "
0 0 14 3 7 #"reverse"
0 0 2 29 1 #"\n"
0 0 2 3 36 #"                                    "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 2 3 1 #" "
0 0 14 3 12 #"vector->list"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"vector->list"
0 0 2 29 1 #"\n"
0 0 2 3 55 #"                                                       "
0 0 22 3 1 #"("
0 0 14 3 9 #"transpose"
0 0 2 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 9 #")))))))))"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"mirror-gauss"
0 0 2 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 16 #"combine-matrices"
0 0 2 29 1 #"\n"
0 0 2 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 13 #"mirror-vector"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"first-half"
0 0 2 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 13 #"mirror-vector"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"second-half"
0 0 2 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 4 #"))))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 17 3 43 #";inverse2nd: matrix<gauss> -> matrix<gauss>"
0 0 2 29 1 #"\n"
0 0 17 3 161
(
 #";takes the result of inverse1st, so its a combined matrix, and seper"
 #"ates, reverses, and redoes the triangularization, then grabs the sec"
 #"ond half (reverse again?)"
) 0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"inverse2nd"
0 0 2 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"let*"
0 0 2 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 8 #"triangle"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 19 #"find-upper-triangle"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"mirror-gauss"
0 0 2 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 5 #"begin"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"display"
0 0 2 3 1 #" "
0 0 19 3 18 #"\"triangle(2nd):\\n\""
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"display-matrix"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"mirror-gauss"
0 0 2 3 1 #" "
0 0 14 3 8 #"triangle"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 12 #"mirror-gauss"
0 0 2 3 1 #" "
0 0 14 3 8 #"triangle"
0 0 22 3 4 #"))))"
0 0 2 29 1 #"\n"
0 0 17 3 28 #";(inverse2nd (inverse1st D))"
0 0 2 29 1 #"\n"
0 0 17 3 57 #";(*m D (second-half (inverse2nd (inverse1st (gauss D)))))"
0 0 2 29 1 #"\n"
0 0 17 3 83
(
 #";(define WINJ (inverse2nd (inverse1st (combine-matrices J (I (vector"
 #"-length J))))))"
) 0 0 2 29 1 #"\n"
0 0 17 3 26 #";(*m J (second-half WINJ))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 20 3 1 #"'"
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"1"
0 0 2 3 2 #"  "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 3 #"   "
0 6          10 2 4 #"2/3\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 2 3 1 #" "
0 6          10 2 5 #"3/10\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 2 3 1 #" "
0 6          10 2 7 #"-14/15\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 3 #"   "
0 0 22 3 2 #"#("
0 6          10 2 4 #"2/7\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 2 3 2 #"  "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 2 #"  "
0 6          10 2 5 #"-1/7\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 2 3 2 #"  "
0 6          10 2 4 #"2/7\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 2 3 2 #"  "
0 0 20 3 1 #"0"
0 0 2 3 2 #"  "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 2 #"#("
0 6          10 2 4 #"5/4\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 2 3 1 #" "
0 6          10 2 4 #"9/8\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 3 #"   "
0 6          10 2 4 #"1/8\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 2 3 2 #"  "
0 0 20 3 1 #"0"
0 0 2 3 2 #"  "
0 0 20 3 1 #"0"
0 0 2 3 2 #"  "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 3 #"   "
0 0 22 3 2 #"#("
0 0 20 3 1 #"8"
0 0 2 3 2 #"  "
0 0 20 3 1 #"7"
0 0 2 3 1 #" "
0 0 20 3 1 #"9"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 3 #"   "
0 0 20 3 1 #"0"
0 0 2 3 2 #"  "
0 0 20 3 1 #"0"
0 0 2 3 2 #"  "
0 0 20 3 1 #"0"
0 0 2 3 2 #"  "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 3 #"   "
0 0 22 3 2 #"#("
0 0 20 3 1 #"9"
0 0 2 3 2 #"  "
0 0 20 3 1 #"6"
0 0 2 3 1 #" "
0 0 20 3 1 #"3"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 3 #"   "
0 0 20 3 1 #"0"
0 0 2 3 2 #"  "
0 0 20 3 1 #"0"
0 0 2 3 2 #"  "
0 0 20 3 1 #"0"
0 0 2 3 2 #"  "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 7         457 2           0 0           0 66 0 22 3 1 #"("
0 0 14 3 10 #"inverse2nd"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"inverse1st"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 16 #"combine-matrices"
0 0 2 3 1 #" "
0 0 14 3 1 #"J"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"I"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-length"
0 0 2 3 1 #" "
0 0 14 3 1 #"J"
0 0 22 3 5 #")))))"
0 0 2 29 1 #"\n"
0 0 17 3 56 #";checked against same website as before -> AND ITS RIGHT"
0 0 2 29 1 #"\n"
0 0 20 3 1 #"'"
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 2 #"  "
0 6          10 2 4 #"3/4\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 2 3 1 #" "
0 6          10 2 5 #"-1/4\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 2 3 1 #" "
0 6          10 2 5 #"-1/4\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 3 #"   "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 6          10 2 5 #"-1/4\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 2 3 2 #"  "
0 6          10 2 4 #"3/4\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 2 3 1 #" "
0 6          10 2 5 #"-1/4\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 3 #"   "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 6          10 2 5 #"-1/4\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 2 3 1 #" "
0 6          10 2 5 #"-1/4\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 2 3 2 #"  "
0 6          10 2 4 #"3/4\0"
3 #"#e\0"
6 #"mixed\0"
2 #"1\0"
0 0 22 3 2 #"))"
0           0 0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 7        1783 2           0 0           0 296 0 20 3 1 #"'"
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 20 3 1 #"3"
0 0 2 3 1 #" "
0 0 20 3 1 #"6"
0 0 2 3 1 #" "
0 0 20 3 1 #"9"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 3 #"   "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"9"
0 0 2 3 1 #" "
0 0 20 3 1 #"7"
0 0 2 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 3 #"   "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"7"
0 0 2 3 1 #" "
0 0 20 3 1 #"9"
0 0 2 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 3 #"   "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"4"
0 0 2 3 1 #" "
0 0 20 3 1 #"8"
0 0 2 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 3 #"   "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"8"
0 0 2 3 1 #" "
0 0 20 3 1 #"9"
0 0 2 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 20 3 1 #"'"
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 2 #"  "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 20 3 1 #"3"
0 0 2 3 1 #" "
0 0 20 3 1 #"6"
0 0 2 3 1 #" "
0 0 20 3 1 #"9"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 3 #"   "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 2 #"  "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"9"
0 0 2 3 1 #" "
0 0 20 3 1 #"7"
0 0 2 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 3 #"   "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 2 #"  "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"7"
0 0 2 3 1 #" "
0 0 20 3 1 #"9"
0 0 2 3 1 #" "
0 0 20 3 1 #"8"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 3 #"   "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 2 #"  "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"4"
0 0 2 3 1 #" "
0 0 20 3 1 #"8"
0 0 2 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 3 #"   "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 2 #"  "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"8"
0 0 2 3 1 #" "
0 0 20 3 1 #"9"
0 0 2 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 29 1 #"\n"
0 0 20 3 1 #"'"
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 2 #"10"
0 0 2 3 1 #" "
0 0 20 3 1 #"9"
0 0 2 3 1 #" "
0 0 20 3 1 #"8"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 3 #"   "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 2 #"  "
0 0 20 3 1 #"6"
0 0 2 3 1 #" "
0 0 20 3 1 #"8"
0 0 2 3 1 #" "
0 0 20 3 1 #"4"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 3 #"   "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 2 #"  "
0 0 20 3 1 #"8"
0 0 2 3 1 #" "
0 0 20 3 1 #"9"
0 0 2 3 1 #" "
0 0 20 3 1 #"7"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 3 #"   "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 2 #"  "
0 0 20 3 1 #"8"
0 0 2 3 1 #" "
0 0 20 3 1 #"7"
0 0 2 3 1 #" "
0 0 20 3 1 #"9"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 2 3 3 #"   "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 2 3 2 #"  "
0 0 20 3 1 #"9"
0 0 2 3 1 #" "
0 0 20 3 1 #"6"
0 0 2 3 1 #" "
0 0 20 3 1 #"3"
0 0 2 3 1 #" "
0 0 20 3 1 #"2"
0 0 2 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #"))"
0           0 0           0 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 7 #";WAY #3"
0 0 4 29 1 #"\n"
0 0 17 3 41 #";redo the previous code to work backwards"
0 0 4 29 1 #"\n"
0 0 17 3 52 #";L REFERS TO LOWER TRIANGLE (2nd itteration through)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 105
(
 #";don't want to switch lines or divide to one around because the firs"
 #"t itteration got 1s in the i diagonal"
) 0 0 4 29 1 #"\n"
0 0 17 3 67
#";also we subtract the rows in the same way, so no need to redo that"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 37 #";lsubtract-rest: matrix num -> matrix"
0 0 4 29 1 #"\n"
0 0 17 3 87
(
 #";the difference with usubtract-rest is that everything ABOVE i is ac"
 #"ted on (ignoring i)"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"lsubtract-rest"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-append"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 3 #"row"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 13 #"subtract-rows"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"get-row"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"row"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 11 #"vector-take"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 11 #"vector-drop"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 17 3 40 #";(define d (ufind-triangle (gauss D) 0))"
0 0 4 29 1 #"\n"
0 0 17 3 2 #";d"
0 0 4 29 1 #"\n"
0 0 17 3 21 #";(lsubtract-rest d 0)"
0 0 4 29 1 #"\n"
0 0 17 3 21 #";(lsubtract-rest d 1)"
0 0 4 29 1 #"\n"
0 0 17 3 21 #";(lsubtract-rest d 2)"
0 0 4 29 1 #"\n"
0 0 17 3 21 #";(lsubtract-rest d 3)"
0 0 4 29 1 #"\n"
0 0 17 3 21 #";(lsubtract-rest d 4)"
0 0 4 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 14 #"lsubtract-rest"
0 0 17 3 2 #" ("
0 0 17 3 14 #"lsubtract-rest"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 14 #"lsubtract-rest"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 47 #"lsubtract-rest (lsubtract-rest d 0) 1) 2) 3) 4)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 33 #";lfind-triangle: matrix -> matrix"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"lfind-triangle"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"lfind-triangle"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"lsubtract-rest"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 5 #"))]))"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";(define dd (lfind-triangle d (sub1 (vector-length d))))"
0 0 4 29 1 #"\n"
0 0 17 3 30 #";(define ddd (second-half dd))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 4 #";inv"
0 0 17 3 18 #": matrix -> matrix"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"inv"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 11 #"second-half"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"lfind-triangle"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"ufind-triangle"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"gauss"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-length"
0 0 4 3 1 #" "
0 0 14 3 1 #"m"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 17 3 13 #";(time (begin"
0 0 4 29 1 #"\n"
0 0 17 3 19 #";        (*m A (inv"
0 0 17 3 4 #" A))"
0 0 4 29 1 #"\n"
0 0 17 3 19 #";        (*m B (inv"
0 0 17 3 4 #" B))"
0 0 4 29 1 #"\n"
0 0 17 3 19 #";        (*m C (inv"
0 0 17 3 4 #" C))"
0 0 4 29 1 #"\n"
0 0 17 3 19 #";        (*m D (inv"
0 0 17 3 4 #" D))"
0 0 4 29 1 #"\n"
0 0 17 3 19 #";        (*m E (inv"
0 0 17 3 4 #" E))"
0 0 4 29 1 #"\n"
0 0 17 3 19 #";        (*m F (inv"
0 0 17 3 4 #" F))"
0 0 4 29 1 #"\n"
0 0 17 3 19 #";        (*m H (inv"
0 0 17 3 4 #" H))"
0 0 4 29 1 #"\n"
0 0 17 3 19 #";        (*m J (inv"
0 0 17 3 4 #" J))"
0 0 4 29 1 #"\n"
0 0 17 3 19 #";        (*m D (inv"
0 0 17 3 6 #" D))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 68
#";~~~USE~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 44 #";(define s1 (apply append (2ndpass graph1)))"
0 0 4 29 1 #"\n"
0 0 17 3 44 #";(define s2 (apply append (2ndpass graph2)))"
0 0 4 29 1 #"\n"
0 0 17 3 44 #";(define s3 (apply append (2ndpass graph3)))"
0 0 4 29 1 #"\n"
0 0 17 3 44 #";(define s4 (apply append (2ndpass graph4)))"
0 0 4 29 1 #"\n"
0 0 17 3 44 #";(define s5 (apply append (2ndpass graph5)))"
0 0 4 29 1 #"\n"
0 0 17 3 44 #";(define s6 (apply append (2ndpass graph6)))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 21 #";(map display-eqn s1)"
0 0 4 29 1 #"\n"
0 0 17 3 21 #";(map display-eqn s2)"
0 0 4 29 1 #"\n"
0 0 17 3 21 #";(map display-eqn s3)"
0 0 4 29 1 #"\n"
0 0 17 3 21 #";(map display-eqn s4)"
0 0 4 29 1 #"\n"
0 0 17 3 21 #";(map display-eqn s5)"
0 0 4 29 1 #"\n"
0 0 17 3 21 #";(map display-eqn s6)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 33 #";eqn->matrix: list(eqn) -> matrix"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 98
(
 #";i need to know what variables there are. Do i include the equal-to "
 #"variables? It wouldn't hurt..."
) 0 0 4 29 1 #"\n"
0 0 17 3 37 #";i need to create an augmented matrix"
0 0 4 29 1 #"\n"
0 0 17 3 54 #";the elements of a matrix are seperated by adding and "
0 0 17 3 17 #"subtracting, but "
0 0 17 3 4 #"any "
0 0 17 3 31 #"encapsuling multiplications or "
0 0 17 3 10 #"divisions "
0 0 17 3 5 #"need "
0 0 17 3 3 #"to "
0 0 17 3 17 #"disappear for me "
0 0 17 3 92
(
 #"to find them... these operations (* and /) will become the element f"
 #"or the equal-to variable"
) 0 0 4 29 1 #"\n"
0 0 17 3 80
(
 #";then i need a simple algebra solver to morph this equation into mat"
 #"rixable form"
) 0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 3 #"sub"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 3 #"div"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 3 #"sub"
0 0 17 3 1 #" "
0 0 17 3 4 #"(mul"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 3 #"sub"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 3 #"div"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 1 #"p"
0 0 17 3 1 #" "
0 0 17 3 1 #"4"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 1 #"5"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 4 #"flow"
0 0 17 3 1 #" "
0 0 17 3 2 #"11"
0 0 17 3 2 #"))"
0 0 17 3 1 #" "
0 0 17 3 3 #"100"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 3 #"div"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 1 #"q"
0 0 17 3 1 #" "
0 0 17 3 2 #"16"
0 0 17 3 2 #") "
0 0 17 3 35 #"20)) 200) (mul (div (p 22) 17) 25))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 109
(
 #";improvements: test whether switch-with-max makes it faster or slowe"
 #"r... seems to me its slower and pointless"
) 0 0 4 29 1 #"\n"
0 0 17 3 78
(
 #";               but this one website said it makes the pivot better."
 #".. ok deal"
) 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 68
#";~~~EULER~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 30 #";THIS HAS TO BE FASTTTTTTTTTTT"
0 0 4 29 1 #"\n"
0 0 17 3 61
#";i will have to save these numbers, like vectors are meant to"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"c"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"*m"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"inv"
0 0 4 3 1 #" "
0 0 14 3 1 #"a"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"b"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 17 3 68
#";!!!!!!! after computing this once, it will have to be saved FOREVER"
0 0 4 29 1 #"\n"
0 0 4 3 1 #" "
0 0 17 3 25 #";or something of the sort"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 5 #";Ax=B"
0 0 4 29 1 #"\n"
0 0 17 3 59
#";x holds the names of the variables that I'm trying to find"
0 0 4 29 1 #"\n"
0 0 17 3 62
#";so first i deduce the value of the variables in x (dpdt, ect)"
0 0 4 29 1 #"\n"
0 0 17 3 49 #";and then use these values to compute p and stuff"
0 0 4 29 1 #"\n"
0 0 17 3 66
#";how can i tell which differential goes with which state variable?"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 17 #";multiply the inv"
0 0 17 3 28 #" of the matrix A to matrix B"
0 0 4 29 1 #"\n"
0 0 17 3 60
#";associate the variable names (from x) with resultant matrix"
0 0 4 29 1 #"\n"
0 0 17 3 91
(
 #";determine how to input these values so that they correspond with th"
 #"e right state variables"
) 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 2 #"A1"
0 0 4 3 1 #" "
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 2 #"-1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"2"
0 0 4 3 1 #" "
0 0 20 3 2 #"-3"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 2 #"X1"
0 0 4 3 1 #" "
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"'"
0 0 14 3 4 #"dxdt"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"'"
0 0 14 3 4 #"dydt"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 7 #"X1start"
0 0 4 3 1 #" "
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 2 #"B1"
0 0 4 3 1 #" "
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"6"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"7"
0 0 4 3 1 #" "
0 0 20 3 1 #"4"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 2 #"U1"
0 0 4 3 1 #" "
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"'"
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 7 #"U1start"
0 0 4 3 1 #" "
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 17 3 57 #";should there be a third number? if so, it should be 1..."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 2 #"C1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"c"
0 0 4 3 1 #" "
0 0 14 3 2 #"A1"
0 0 4 3 1 #" "
0 0 14 3 2 #"B1"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 47 #";find-X: vector(num) matrix(i,i) -> matrix(num)"
0 0 4 29 1 #"\n"
0 0 17 3 6 #";Ax=BU"
0 0 4 29 1 #"\n"
0 0 17 3 15 #";x= (A-1*B) * U"
0 0 4 29 1 #"\n"
0 0 17 3 15 #";x=    C    * U"
0 0 4 29 1 #"\n"
0 0 17 3 63
#";the previous iteration of X does not directly affect the new X"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"find-X"
0 0 4 3 1 #" "
0 0 14 3 5 #"Uvals"
0 0 4 3 1 #" "
0 0 14 3 1 #"C"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"*m"
0 0 4 3 1 #" "
0 0 14 3 1 #"C"
0 0 4 3 1 #" "
0 0 14 3 5 #"Uvals"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 17 3 39 #";C is already defined -> do I input it?"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 17 3 40 #";should return a nx1 matrix (one column)"
0 0 4 29 1 #"\n"
0 0 17 3 62
#";returns slope for this time step according to matrix equation"
0 0 4 29 1 #"\n"
0 0 17 3 19 #";(find-X U1vals C1)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 71
(
 #";ok so how do I structure the issue with variables? thats in X and i"
 #"n U"
) 0 0 4 29 1 #"\n"
0 0 17 3 72
(
 #";probably the best way is through making a two-column matrix, the fi"
 #"rst "
) 0 0 17 3 5 #"with "
0 0 17 3 48 #"the names and the second with the current number"
0 0 4 29 1 #"\n"
0 0 17 3 72
(
 #";but isnt putting the names pointless? The only points at which numb"
 #"ers "
) 0 0 17 3 4 #"are "
0 0 17 3 34 #"needed are for sorting (John does "
0 0 17 3 7 #"that), "
0 0 17 3 6 #"euler "
0 0 17 3 7 #"to cut "
0 0 17 3 11 #"off at the "
0 0 17 3 79
(
 #"right point (which can be achieved by looking at the length of X), a"
 #"nd plotting"
) 0 0 4 29 1 #"\n"
0 0 17 3 76
(
 #";its easier to program it with names for now and deal with other stu"
 #"ff later"
) 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 35 #";euler: matrix matrix num -> matrix"
0 0 4 29 1 #"\n"
0 0 17 3 91
(
 #";to avoid garbage collection, must re-use vector ;not doing that rig"
 #"ht now -> will do later"
) 0 0 4 29 1 #"\n"
0 0 17 3 85
(
 #";the matrices are of different lengths -> cut off Uvals so that it i"
 #"s the length of X"
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"euler"
0 0 4 3 1 #" "
0 0 14 3 5 #"Xvals"
0 0 4 3 1 #" "
0 0 14 3 5 #"Uvals"
0 0 4 3 1 #" "
0 0 14 3 1 #"C"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 17 3 9 #";-> U_new"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-append"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 14 3 1 #"u"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"vector"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 1 #"u"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 14 3 5 #"Xvals"
0 0 4 3 1 #" "
0 0 17 3 74
(
 #";find-X finds slopes, and euler simply finds next step based on this"
 #" slope"
) 0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 17 3 40 #";Xvals = slopes ;Uvals = state variables"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 11 #"vector-take"
0 0 4 3 1 #" "
0 0 14 3 5 #"Uvals"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-length"
0 0 4 3 1 #" "
0 0 14 3 5 #"Xvals"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-vector"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"-"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-length"
0 0 4 3 1 #" "
0 0 14 3 5 #"Uvals"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-length"
0 0 4 3 1 #" "
0 0 14 3 5 #"Xvals"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"vector"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 36 #"euler (find-X U1vals C1) U1vals .01)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 43 #";fm: matrix(num ix1) matrix(num ix1) -> num"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"fm"
0 0 4 3 1 #" "
0 0 14 3 8 #"function"
0 0 4 3 1 #" "
0 0 14 3 6 #"values"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 5 #"apply"
0 0 4 3 1 #" "
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"vector->list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 1 #"d"
0 0 4 3 1 #" "
0 0 14 3 1 #"u"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"d"
0 0 4 3 1 #" "
0 0 14 3 1 #"u"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 8 #"function"
0 0 4 3 1 #" "
0 0 14 3 6 #"values"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 2 #"A2"
0 0 4 3 1 #" "
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 2 #"X2"
0 0 4 3 1 #" "
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"'"
0 0 14 3 4 #"xdot"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"'"
0 0 14 3 4 #"ydot"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 2 #"B2"
0 0 4 3 1 #" "
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 2 #"U2"
0 0 4 3 1 #" "
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"'"
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 7 #"X2start"
0 0 4 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 7 #"U2start"
0 0 4 3 1 #" "
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 62
#";find-k: matrix(num ixj) xvals(num jx1) num -> matrix(num jx1)"
0 0 4 29 1 #"\n"
0 0 17 3 19 #";find new (x)k vals"
0 0 4 29 1 #"\n"
0 0 17 3 100
(
 #";d/ds reffer to the function matrix (aka C, aka A^-1 * B)  ;d for do"
 #"t -> dxdt -> f to find the slope"
) 0 0 4 29 1 #"\n"
0 0 17 3 67
#";m/ms reffer to the current slope for this iteration, derived from "
0 0 17 3 8 #"running "
0 0 17 3 40 #"ds on xvals with fm (aka evaluating the "
0 0 17 3 30 #"functions in ds)  ;m for slope"
0 0 4 29 1 #"\n"
0 0 17 3 69
(
 #";x/xvals reffer to the current state of the state variables, used to"
 #" "
) 0 0 17 3 5 #"find "
0 0 17 3 41 #"the slope for the next iteration ; x for "
0 0 17 3 17 #"starting position"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"mini-euler"
0 0 4 3 1 #" "
0 0 14 3 2 #"us"
0 0 4 3 1 #" "
0 0 14 3 2 #"ks"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 17 3 34 #";l = length of ds to crop xvals by"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-append"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 1 #"u"
0 0 4 3 1 #" "
0 0 14 3 1 #"k"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 1 #"u"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 4 3 1 #" "
0 0 14 3 1 #"k"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 14 3 11 #"vector-take"
0 0 4 3 1 #" "
0 0 14 3 2 #"us"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 2 #"ks"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 14 3 11 #"vector-drop"
0 0 4 3 1 #" "
0 0 14 3 2 #"us"
0 0 4 3 1 #" "
0 0 14 3 1 #"l"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 6 #"slopes"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 10 #"vector-map"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 6 #"lambda"
0 0 17 3 1 #"("
0 0 17 3 1 #"d"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 2 #"fm"
0 0 17 3 1 #" "
0 0 17 3 1 #"d"
0 0 17 3 1 #" "
0 0 17 3 21 #"X2start)) (c A2 B2)))"
0 0 4 29 1 #"\n"
0 0 17 3 29 #";(define values X2start) ;2x1"
0 0 4 29 1 #"\n"
0 0 17 3 34 #";(define l (vector-length slopes))"
0 0 4 29 1 #"\n"
0 0 17 3 13 #";(define t 1)"
0 0 4 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 47 #"mini-euler slopes values l t) ;<- example works"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 17 3 2 #";("
0 0 17 3 11 #"make-vector"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 1 #"-"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 19 #"vector-length xvals"
0 0 17 3 44 #") l)))) ;need to maintain original structure"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 17 3 96
(
 #";(vector-append (vector-take #(0 1 2 3) 1) (vector-drop  #(0 1 2 3) "
 #"1)) ;-> '#(0 1 2 3) ;no obos"
) 0 0 4 29 1 #"\n"
0 0 17 3 8 #";(find-k"
0 0 17 3 14 #" (vector-map ("
0 0 17 3 6 #"lambda"
0 0 17 3 3 #"(d)"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 59
#"fm d #(#(0) #(0) #(1)))) #(#(1 1 0) #(1 0 2))) ;aka a dk/ms"
0 0 4 29 1 #"\n"
0 0 17 3 26 #";        #(#(0) #(0) #(1))"
0 0 4 29 1 #"\n"
0 0 17 3 9 #";        "
0 0 17 3 14 #"(vector-length"
0 0 17 3 1 #" "
0 0 17 3 4 #"#(#("
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 15 #"1 0) #(1 0 2)))"
0 0 4 29 1 #"\n"
0 0 17 3 11 #";        1)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 20 #";x_0 = xvals; C = ds"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"rk4"
0 0 4 3 1 #" "
0 0 14 3 5 #"Uvals"
0 0 4 3 1 #" "
0 0 14 3 1 #"C"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 3 #"max"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 3 #"max"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 15 3 4 #"let*"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 7 #"dlength"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-length"
0 0 4 3 1 #" "
0 0 14 3 1 #"C"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 2 #"K1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 1 #"d"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"fm"
0 0 4 3 1 #" "
0 0 14 3 1 #"d"
0 0 4 3 1 #" "
0 0 14 3 5 #"Uvals"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 1 #"C"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 2 #"K2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 1 #"d"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"fm"
0 0 4 3 1 #" "
0 0 14 3 1 #"d"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"mini-euler"
0 0 4 3 1 #" "
0 0 14 3 5 #"Uvals"
0 0 4 3 1 #" "
0 0 14 3 2 #"K1"
0 0 4 3 1 #" "
0 0 14 3 7 #"dlength"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 20 3 2 #".5"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 4 #"))))"
0 0 4 3 1 #" "
0 0 14 3 1 #"C"
0 0 22 3 2 #"))"
0 0 17 3 2 #";)"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 2 #"K3"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 1 #"d"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"fm"
0 0 4 3 1 #" "
0 0 14 3 1 #"d"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"mini-euler"
0 0 4 3 1 #" "
0 0 14 3 5 #"Uvals"
0 0 4 3 1 #" "
0 0 14 3 2 #"K2"
0 0 4 3 1 #" "
0 0 14 3 7 #"dlength"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 20 3 2 #".5"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 4 #"))))"
0 0 4 3 1 #" "
0 0 14 3 1 #"C"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 2 #"K4"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 1 #"d"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"fm"
0 0 4 3 1 #" "
0 0 14 3 1 #"d"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"mini-euler"
0 0 4 3 1 #" "
0 0 14 3 5 #"Uvals"
0 0 4 3 1 #" "
0 0 14 3 2 #"K3"
0 0 4 3 1 #" "
0 0 14 3 7 #"dlength"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 14 3 1 #"C"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 14 3 8 #"Uresults"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 17 3 2 #";("
0 0 17 3 5 #"begin"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 7 #"display"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 4 #"list"
0 0 17 3 1 #" "
0 0 17 3 8 #"\"\\nk1: \""
0 0 17 3 1 #" "
0 0 17 3 2 #"K1"
0 0 17 3 1 #" "
0 0 17 3 8 #"\"\\nk2: \""
0 0 17 3 1 #" "
0 0 17 3 2 #"K2"
0 0 17 3 1 #" "
0 0 17 3 7 #"\"\\nk3 \""
0 0 17 3 1 #" "
0 0 17 3 16 #"K3 \"\\nk4: \" K4))"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-append"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-map"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 2 #"us"
0 0 4 3 1 #" "
0 0 14 3 2 #"k1"
0 0 4 3 1 #" "
0 0 14 3 2 #"k2"
0 0 4 3 1 #" "
0 0 14 3 2 #"k3"
0 0 4 3 1 #" "
0 0 14 3 2 #"k4"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 2 #"us"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"/"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 4 3 1 #" "
0 0 20 3 1 #"6"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"+"
0 0 4 3 1 #" "
0 0 14 3 2 #"k1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 4 3 1 #" "
0 0 14 3 2 #"k2"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 20 3 1 #"2"
0 0 4 3 1 #" "
0 0 14 3 2 #"k3"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 2 #"k4"
0 0 22 3 4 #"))))"
0 0 4 3 1 #" "
0 0 17 3 19 #";instead of simply "
0 0 17 3 6 #"using "
0 0 17 3 8 #"find-X, "
0 0 17 3 13 #"looks to the "
0 0 17 3 7 #"future "
0 0 17 3 82
(
 #"and computes it by itself, then multiplies these new slopes by the o"
 #"riginal values"
) 0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 17 3 51 #";there is no real way to make euler and rk4 run in "
0 0 17 3 4 #"the "
0 0 17 3 36 #"same structure, because euler needs "
0 0 17 3 3 #"to "
0 0 17 3 8 #"iterate "
0 0 17 3 5 #"back "
0 0 17 3 54 #"and forth with find-X, while rk4 does it all by itself"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 22 3 1 #"("
0 0 14 3 11 #"vector-take"
0 0 4 3 1 #" "
0 0 14 3 5 #"Uvals"
0 0 4 3 1 #" "
0 0 14 3 7 #"dlength"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 2 #"K1"
0 0 4 3 1 #" "
0 0 14 3 2 #"K2"
0 0 4 3 1 #" "
0 0 14 3 2 #"K3"
0 0 4 3 1 #" "
0 0 14 3 2 #"K4"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 20 #"                    "
0 0 22 3 1 #"("
0 0 14 3 11 #"vector-drop"
0 0 4 3 1 #" "
0 0 14 3 5 #"Uvals"
0 0 4 3 1 #" "
0 0 14 3 7 #"dlength"
0 0 22 3 4 #"))))"
0 0 17 3 2 #";)"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-map"
0 0 4 3 1 #" "
0 0 14 3 6 #"vector"
0 0 4 3 1 #" "
0 0 14 3 8 #"Uresults"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"rk4"
0 0 4 3 1 #" "
0 0 14 3 8 #"Uresults"
0 0 4 3 1 #" "
0 0 14 3 1 #"C"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 3 #"max"
0 0 22 3 6 #")))]))"
0 0 4 3 1 #" "
0 0 17 3 6 #";new X"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 64
#";final: matrix matrix matrix matrix num num -> list(vector(num))"
0 0 4 29 1 #"\n"
0 0 17 3 64
#";       coef_P P_name coef_S S_name    (P=differential, S=state)"
0 0 4 29 1 #"\n"
0 0 17 3 53 #";       from john -> to the plotter (state variables)"
0 0 4 29 1 #"\n"
0 0 17 3 99
(
 #";result doesn't need the names of the state variables, as long as th"
 #"ey are always in the same place"
) 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 16 #";iterater-euler:"
0 0 17 3 1 #" "
0 0 17 3 6 #"matrix"
0 0 17 3 1 #"("
0 0 17 3 3 #"num"
0 0 17 3 1 #" "
0 0 17 3 3 #"ixi"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 6 #"matrix"
0 0 17 3 1 #"("
0 0 17 3 3 #"ix1"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 7 #"matrix("
0 0 17 3 3 #"ix1"
0 0 17 3 1 #")"
0 0 17 3 2 #"  "
0 0 17 3 6 #"matrix"
0 0 17 3 1 #"("
0 0 17 3 3 #"num"
0 0 17 3 1 #" "
0 0 17 3 3 #"ixi"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 6 #"matrix"
0 0 17 3 1 #"("
0 0 17 3 3 #"ix1"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 39 #"matrix(ix1) num num -> list(matrix ix1)"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"iterater-euler"
0 0 4 3 1 #" "
0 0 14 3 1 #"A"
0 0 4 3 1 #" "
0 0 14 3 1 #"X"
0 0 4 3 1 #" "
0 0 14 3 6 #"Xstart"
0 0 4 3 1 #" "
0 0 14 3 1 #"B"
0 0 4 3 1 #" "
0 0 14 3 1 #"U"
0 0 4 3 1 #" "
0 0 14 3 6 #"Ustart"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 4 3 1 #" "
0 0 14 3 10 #"iterations"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 5 #"local"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 1 #"C"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"c"
0 0 4 3 1 #" "
0 0 14 3 1 #"A"
0 0 4 3 1 #" "
0 0 14 3 1 #"B"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"iterate"
0 0 4 3 1 #" "
0 0 14 3 5 #"Xvals"
0 0 4 3 1 #" "
0 0 14 3 5 #"Uvals"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 2 #"[("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 4 #"let*"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 5 #"X_new"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"find-X"
0 0 4 3 1 #" "
0 0 14 3 5 #"Uvals"
0 0 4 3 1 #" "
0 0 14 3 1 #"C"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 27 #"                           "
0 0 22 3 1 #"("
0 0 14 3 5 #"U_new"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"euler"
0 0 4 3 1 #" "
0 0 14 3 5 #"X_new"
0 0 4 3 1 #" "
0 0 14 3 5 #"Uvals"
0 0 4 3 1 #" "
0 0 14 3 1 #"C"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 14 3 5 #"U_new"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 7 #"iterate"
0 0 4 3 1 #" "
0 0 14 3 5 #"X_new"
0 0 4 3 1 #" "
0 0 14 3 5 #"U_new"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 8 #"))))])))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 7 #"iterate"
0 0 4 3 1 #" "
0 0 14 3 6 #"Xstart"
0 0 4 3 1 #" "
0 0 14 3 6 #"Ustart"
0 0 4 3 1 #" "
0 0 14 3 10 #"iterations"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"iterater-rk4"
0 0 4 3 1 #" "
0 0 14 3 1 #"C"
0 0 4 3 1 #" "
0 0 14 3 6 #"Ustart"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 4 3 1 #" "
0 0 14 3 10 #"iterations"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 14 3 3 #"rk4"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 1 #"u"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 14 3 1 #"u"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 14 3 6 #"Ustart"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 14 3 1 #"C"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 14 3 10 #"iterations"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-pretty"
0 0 4 3 1 #" "
0 0 14 3 3 #"vec"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 4 3 1 #" "
0 0 14 3 3 #"vec"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 17 3 74
(
 #";issue: seemingly infinite number of points to plot -> real time plo"
 #"tting?"
) 0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 17 3 2 #";("
0 0 17 3 6 #"append"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 12 #"vector->list"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 10 #"vector-map"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 6 #"lambda"
0 0 17 3 1 #"("
0 0 17 3 5 #"point"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 13 #"vector-append"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 6 #"vector"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 1 #"*"
0 0 17 3 1 #" "
0 0 17 3 1 #"t"
0 0 17 3 1 #" "
0 0 17 3 1 #"i"
0 0 17 3 2 #"))"
0 0 17 3 1 #" "
0 0 17 3 5 #"point"
0 0 17 3 2 #"))"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 17 #"vector-drop-right"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 3 #"car"
0 0 17 3 1 #" "
0 0 17 3 9 #"vec) 1)))"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-append"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"vector"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 3 #"vec"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-pretty"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 3 #"vec"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 22 3 5 #"))]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 7         679 4           0 0           0 112 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"plot"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"points"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-pretty"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 14 #"iterater-euler"
0 0 2 3 1 #" "
0 0 14 3 2 #"A2"
0 0 2 3 1 #" "
0 0 14 3 2 #"X2"
0 0 2 3 1 #" "
0 0 14 3 7 #"X2start"
0 0 2 3 1 #" "
0 0 14 3 2 #"B2"
0 0 2 3 1 #" "
0 0 14 3 2 #"U2"
0 0 2 3 1 #" "
0 0 14 3 7 #"U2start"
0 0 2 3 1 #" "
0 0 20 3 3 #".01"
0 0 2 3 1 #" "
0 0 20 3 4 #"5000"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 3 #".01"
0 0 22 3 6 #")#:sym"
0 0 2 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"dot"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 7 #"#:x-min"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 22 3 7 #"#:x-max"
0 0 2 3 1 #" "
0 0 20 3 2 #"20"
0 0 2 3 1 #" "
0 0 22 3 7 #"#:y-min"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 22 3 7 #"#:y-max"
0 0 2 3 1 #" "
0 0 20 3 2 #"20"
0 0 22 3 1 #")"
0 0 2 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 4 #"plot"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"points"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-pretty"
0 0 2 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"iterater-rk4"
0 0 2 3 1 #" "
0 0 14 3 2 #"A2"
0 0 2 3 1 #" "
0 0 14 3 2 #"X2"
0 0 2 3 1 #" "
0 0 14 3 7 #"X2start"
0 0 2 3 1 #" "
0 0 14 3 2 #"B2"
0 0 2 3 1 #" "
0 0 14 3 2 #"U2"
0 0 2 3 1 #" "
0 0 14 3 7 #"U2start"
0 0 2 3 1 #" "
0 0 20 3 3 #".01"
0 0 2 3 1 #" "
0 0 20 3 4 #"5000"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 20 3 3 #".01"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 5 #"#:sym"
0 0 2 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"dot"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 7 #"#:x-min"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 22 3 7 #"#:x-max"
0 0 2 3 1 #" "
0 0 20 3 2 #"20"
0 0 2 3 1 #" "
0 0 22 3 7 #"#:y-min"
0 0 2 3 1 #" "
0 0 20 3 1 #"0"
0 0 2 3 1 #" "
0 0 22 3 7 #"#:y-max"
0 0 2 3 1 #" "
0 0 20 3 2 #"20"
0 0 22 3 1 #")"
0           0 0 0 4 29 1 #"\n"
0 7         391 4           0 0           0 64 0 20 3 1 #"'"
0 0 22 3 5 #"(#(#("
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"1"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"4"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"1"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"8"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"8"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"1"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 4 #"#(#("
0 0 20 3 2 #"24"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 2 #"18"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"1"
0 0 22 3 2 #"))"
0 0 2 29 1 #"\n"
0 0 2 3 2 #"  "
0 0 22 3 4 #"#(#("
0 0 20 3 2 #"66"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 2 #"44"
0 0 22 3 1 #")"
0 0 2 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0           0 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 2 #"A3"
0 0 4 3 1 #" "
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 2 #"X3"
0 0 4 3 1 #" "
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"'"
0 0 14 3 4 #"dqdt"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 2 #"B3"
0 0 4 3 1 #" "
0 0 22 3 4 #"#(#("
0 0 20 3 3 #"-.1"
0 0 4 3 1 #" "
0 0 20 3 5 #"3/250"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 2 #"U3"
0 0 4 3 1 #" "
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"'"
0 0 14 3 1 #"q"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 7 #"X3start"
0 0 4 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 7 #"U3start"
0 0 4 3 1 #" "
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 2 #"A4"
0 0 4 3 1 #" "
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 2 #"X4"
0 0 4 3 1 #" "
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"'"
0 0 14 3 4 #"dqdt"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"'"
0 0 14 3 4 #"dpdt"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 2 #"B4"
0 0 4 3 1 #" "
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 20 3 2 #"50"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 4 #"-100"
0 0 4 3 1 #" "
0 0 20 3 3 #"-20"
0 0 4 3 1 #" "
0 0 20 3 2 #"12"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 2 #"U4"
0 0 4 3 1 #" "
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"'"
0 0 14 3 1 #"q"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"'"
0 0 14 3 1 #"p"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 7 #"X4start"
0 0 4 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 7 #"U4start"
0 0 4 3 1 #" "
0 0 22 3 4 #"#(#("
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 2 #"-5"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 2 #"#("
0 0 20 3 1 #"1"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 8 #"timestep"
0 0 4 3 1 #" "
0 0 20 3 2 #".1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 5 #"steps"
0 0 4 3 1 #" "
0 0 20 3 5 #"10000"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 4 #"xmax"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 4 #"ymin"
0 0 4 3 1 #" "
0 0 20 3 2 #"-1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 4 #"ymax"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 29 #";vectors->list : avov -> alol"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 15 #"vectors->points"
0 0 4 3 1 #" "
0 0 14 3 6 #"alovov"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 5 #"apply"
0 0 4 3 1 #" "
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 4 #"list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 7 #"flatten"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 14 3 12 #"vector->list"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 23 #"                       "
0 0 22 3 1 #"("
0 0 14 3 12 #"vector->list"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 4 #"))))"
0 0 4 3 1 #" "
0 0 14 3 6 #"alovov"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"plotg"
0 0 4 3 1 #" "
0 0 14 3 4 #"john"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"A"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"john"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 1 #"X"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 4 3 1 #" "
0 0 14 3 4 #"john"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 1 #"B"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"caddr"
0 0 4 3 1 #" "
0 0 14 3 4 #"john"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 1 #"U"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"cadddr"
0 0 4 3 1 #" "
0 0 14 3 4 #"john"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"[("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-length"
0 0 4 3 1 #" "
0 0 14 3 1 #"X"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 4 #"void"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"C"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"c"
0 0 4 3 1 #" "
0 0 14 3 1 #"A"
0 0 4 3 1 #" "
0 0 14 3 1 #"B"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 6 #"Ustart"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-vector"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-length"
0 0 4 3 1 #" "
0 0 14 3 1 #"U"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"vector"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 17 3 14 #";(plot (points"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-pretty"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 12 #"iterater-rk4"
0 0 4 3 1 #" "
0 0 14 3 1 #"C"
0 0 4 3 1 #" "
0 0 14 3 6 #"Ustart"
0 0 4 3 1 #" "
0 0 14 3 8 #"timestep"
0 0 4 3 1 #" "
0 0 14 3 5 #"steps"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 14 3 8 #"timestep"
0 0 4 3 1 #" "
0 0 14 3 5 #"steps"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 17 3 26 #";              #:sym 'dot)"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 17 3 7 #";      "
0 0 17 3 7 #"#:x-min"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 7 #"#:x-max"
0 0 17 3 1 #" "
0 0 17 3 4 #"xmax"
0 0 17 3 1 #" "
0 0 17 3 7 #"#:y-min"
0 0 17 3 1 #" "
0 0 17 3 18 #"ymin #:y-max ymax)"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 5 #")])))"
0 0 4 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 12 #"iterater-rk4"
0 0 17 3 1 #" "
0 0 17 3 2 #"A4"
0 0 17 3 1 #" "
0 0 17 3 2 #"X4"
0 0 17 3 1 #" "
0 0 17 3 7 #"X4start"
0 0 17 3 1 #" "
0 0 17 3 2 #"B4"
0 0 17 3 1 #" "
0 0 17 3 2 #"U4"
0 0 17 3 1 #" "
0 0 17 3 7 #"U4start"
0 0 17 3 12 #" .001 10000)"
0 0 4 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 4 #"plot"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 6 #"points"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 11 #"make-pretty"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 12 #"iterater-rk4"
0 0 17 3 1 #" "
0 0 17 3 2 #"A4"
0 0 17 3 1 #" "
0 0 17 3 2 #"X4"
0 0 17 3 1 #" "
0 0 17 3 7 #"X4start"
0 0 17 3 1 #" "
0 0 17 3 2 #"B4"
0 0 17 3 1 #" "
0 0 17 3 2 #"U4"
0 0 17 3 1 #" "
0 0 17 3 7 #"U4start"
0 0 17 3 1 #" "
0 0 17 3 4 #".001"
0 0 17 3 1 #" "
0 0 17 3 5 #"10000"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 4 #".001"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 5 #"#:sym"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 3 #"dot"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 7 #"#:x-min"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 7 #"#:x-max"
0 0 17 3 1 #" "
0 0 17 3 1 #"1"
0 0 17 3 1 #" "
0 0 17 3 7 #"#:y-min"
0 0 17 3 1 #" "
0 0 17 3 2 #"-1"
0 0 17 3 1 #" "
0 0 17 3 10 #"#:y-max 1)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 4 #"plot"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 6 #"points"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 11 #"make-pretty"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 12 #"iterater-rk4"
0 0 17 3 1 #" "
0 0 17 3 2 #"A3"
0 0 17 3 1 #" "
0 0 17 3 2 #"X3"
0 0 17 3 1 #" "
0 0 17 3 7 #"X3start"
0 0 17 3 1 #" "
0 0 17 3 2 #"B3"
0 0 17 3 1 #" "
0 0 17 3 2 #"U3"
0 0 17 3 1 #" "
0 0 17 3 7 #"U3start"
0 0 17 3 1 #" "
0 0 17 3 2 #".1"
0 0 17 3 1 #" "
0 0 17 3 5 #"10000"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 3 #".01"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 5 #"#:sym"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 3 #"dot"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 7 #"#:x-min"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 7 #"#:x-max"
0 0 17 3 1 #" "
0 0 17 3 3 #"100"
0 0 17 3 1 #" "
0 0 17 3 7 #"#:y-min"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 12 #"#:y-max .13)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 4 #"plot"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 6 #"points"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 11 #"make-pretty"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 12 #"iterater-rk4"
0 0 17 3 1 #" "
0 0 17 3 2 #"A2"
0 0 17 3 1 #" "
0 0 17 3 2 #"X2"
0 0 17 3 1 #" "
0 0 17 3 7 #"X2start"
0 0 17 3 1 #" "
0 0 17 3 2 #"B2"
0 0 17 3 1 #" "
0 0 17 3 2 #"U2"
0 0 17 3 1 #" "
0 0 17 3 7 #"U2start"
0 0 17 3 1 #" "
0 0 17 3 3 #".01"
0 0 17 3 1 #" "
0 0 17 3 4 #"5000"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 3 #".01"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 5 #"#:sym"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 3 #"dot"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 7 #"#:x-min"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 7 #"#:x-max"
0 0 17 3 1 #" "
0 0 17 3 2 #"20"
0 0 17 3 1 #" "
0 0 17 3 7 #"#:y-min"
0 0 17 3 14 #" 0 #:y-max 20)"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 17 3 28 #";improvements: plot-as-we-go"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"plotg2"
0 0 4 3 1 #" "
0 0 14 3 4 #"john"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"A"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"john"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 1 #"X"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 4 3 1 #" "
0 0 14 3 4 #"john"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 1 #"B"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"caddr"
0 0 4 3 1 #" "
0 0 14 3 4 #"john"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 1 #"U"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"cadddr"
0 0 4 3 1 #" "
0 0 14 3 4 #"john"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"[("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-length"
0 0 4 3 1 #" "
0 0 14 3 1 #"X"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 4 #"void"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"C"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"c"
0 0 4 3 1 #" "
0 0 14 3 1 #"A"
0 0 4 3 1 #" "
0 0 14 3 1 #"B"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 6 #"Ustart"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-vector"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-length"
0 0 4 3 1 #" "
0 0 14 3 1 #"U"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"vector"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 11 #"vector-set!"
0 0 4 3 1 #" "
0 0 14 3 6 #"Ustart"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-length"
0 0 4 3 1 #" "
0 0 14 3 6 #"Ustart"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"vector"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 17 3 10 #";         "
0 0 17 3 13 #"(plot (points"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-pretty"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 12 #"iterater-rk4"
0 0 4 3 1 #" "
0 0 14 3 1 #"C"
0 0 4 3 1 #" "
0 0 14 3 6 #"Ustart"
0 0 4 3 1 #" "
0 0 14 3 8 #"timestep"
0 0 4 3 1 #" "
0 0 14 3 5 #"steps"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 14 3 8 #"timestep"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 17 3 10 #";         "
0 0 17 3 14 #"              "
0 0 17 3 5 #"#:sym"
0 0 17 3 1 #" "
0 0 17 3 1 #"'"
0 0 17 3 3 #"dot"
0 0 17 3 1 #" "
0 0 17 3 7 #"#:color"
0 0 17 3 6 #" 'red)"
0 0 4 29 1 #"\n"
0 0 17 3 10 #";         "
0 0 17 3 6 #"      "
0 0 17 3 8 #"#:x-min "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 7 #"#:x-max"
0 0 17 3 1 #" "
0 0 17 3 3 #"500"
0 0 17 3 1 #" "
0 0 17 3 7 #"#:y-min"
0 0 17 3 1 #" "
0 0 17 3 4 #"-200"
0 0 17 3 1 #" "
0 0 17 3 12 #"#:y-max 200)"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 5 #")])))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"make-pretty2"
0 0 4 3 1 #" "
0 0 14 3 3 #"vec"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 4 3 1 #" "
0 0 14 3 5 #"which"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 14 3 6 #"empty?"
0 0 4 3 1 #" "
0 0 14 3 3 #"vec"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 5 #"empty"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 17 3 74
(
 #";issue: seemingly infinite number of points to plot -> real time plo"
 #"tting?"
) 0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 17 3 9 #";(append "
0 0 17 3 1 #"("
0 0 17 3 12 #"vector->list"
0 0 17 3 2 #" ("
0 0 17 3 10 #"vector-map"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 6 #"lambda"
0 0 17 3 1 #"("
0 0 17 3 5 #"point"
0 0 17 3 1 #")"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 13 #"vector-append"
0 0 17 3 2 #" ("
0 0 17 3 6 #"vector"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 1 #"*"
0 0 17 3 1 #" "
0 0 17 3 1 #"t"
0 0 17 3 1 #" "
0 0 17 3 1 #"i"
0 0 17 3 2 #"))"
0 0 17 3 1 #" "
0 0 17 3 5 #"point"
0 0 17 3 2 #"))"
0 0 17 3 1 #" "
0 0 17 3 1 #"("
0 0 17 3 17 #"vector-drop-right"
0 0 17 3 1 #" "
0 0 17 3 14 #"(car vec) 1)))"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-append"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"vector"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"*"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 10 #"vector-ref"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 3 #"vec"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 5 #"which"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 12 #"make-pretty2"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 4 3 1 #" "
0 0 14 3 3 #"vec"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"add1"
0 0 4 3 1 #" "
0 0 14 3 1 #"i"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"t"
0 0 4 3 1 #" "
0 0 14 3 5 #"which"
0 0 22 3 5 #"))]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"plotg3"
0 0 4 3 1 #" "
0 0 14 3 4 #"john"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"empty?"
0 0 4 3 1 #" "
0 0 14 3 4 #"john"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 2 #"()"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"A"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 3 #"car"
0 0 4 3 1 #" "
0 0 14 3 4 #"john"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 1 #"X"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"cadr"
0 0 4 3 1 #" "
0 0 14 3 4 #"john"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 1 #"B"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"caddr"
0 0 4 3 1 #" "
0 0 14 3 4 #"john"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 14 3 1 #"U"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"cadddr"
0 0 4 3 1 #" "
0 0 14 3 4 #"john"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"[("
0 0 14 3 1 #"="
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-length"
0 0 4 3 1 #" "
0 0 14 3 1 #"X"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 4 #"void"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 14 3 1 #"C"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"c"
0 0 4 3 1 #" "
0 0 14 3 1 #"A"
0 0 4 3 1 #" "
0 0 14 3 1 #"B"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 14 3 6 #"Ustart"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 11 #"make-vector"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-length"
0 0 4 3 1 #" "
0 0 14 3 1 #"U"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"vector"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 14 3 11 #"vector-set!"
0 0 4 3 1 #" "
0 0 14 3 6 #"Ustart"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-length"
0 0 4 3 1 #" "
0 0 14 3 6 #"Ustart"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"vector"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 2 #"(("
0 0 14 3 4 #"ugly"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"iterater-rk4"
0 0 4 3 1 #" "
0 0 14 3 1 #"C"
0 0 4 3 1 #" "
0 0 14 3 6 #"Ustart"
0 0 4 3 1 #" "
0 0 14 3 8 #"timestep"
0 0 4 3 1 #" "
0 0 14 3 5 #"steps"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 12 #"make-pretty2"
0 0 4 3 1 #" "
0 0 14 3 4 #"ugly"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 4 3 1 #" "
0 0 14 3 8 #"timestep"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 4 #"sub1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 13 #"vector-length"
0 0 4 3 1 #" "
0 0 14 3 6 #"Ustart"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 10 #")))))]))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 14 3 7 #"plotall"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 10 #"pointlists"
0 0 4 3 1 #" "
0 0 14 3 4 #"xmin"
0 0 4 3 1 #" "
0 0 14 3 4 #"xmax"
0 0 4 3 1 #" "
0 0 14 3 4 #"ymin"
0 0 4 3 1 #" "
0 0 14 3 4 #"ymax"
0 0 4 3 1 #" "
0 0 26 3 1 #"."
0 0 4 3 1 #" "
0 0 14 3 6 #"colors"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 15 3 3 #"let"
0 0 22 3 2 #"(("
0 0 14 3 9 #"newpoints"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 14 3 5 #"apply"
0 0 4 3 1 #" "
0 0 14 3 3 #"mix"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 14 3 3 #"map"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"points"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 4 3 1 #" "
0 0 14 3 10 #"pointlists"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 41 #"                                         "
0 0 22 3 5 #"#:sym"
0 0 4 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"dot"
0 0 4 29 1 #"\n"
0 0 4 3 41 #"                                         "
0 0 22 3 7 #"#:color"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 5 #"null?"
0 0 4 3 1 #" "
0 0 14 3 6 #"colors"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 20 3 1 #"'"
0 0 14 3 5 #"black"
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 22 3 1 #"("
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 1 #"<"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 14 3 6 #"colors"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 57 #"                                                         "
0 0 20 3 1 #"'"
0 0 14 3 5 #"black"
0 0 4 29 1 #"\n"
0 0 4 3 57 #"                                                         "
0 0 22 3 1 #"("
0 0 14 3 8 #"list-ref"
0 0 4 3 1 #" "
0 0 14 3 6 #"colors"
0 0 4 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 22 3 1 #"("
0 0 14 3 10 #"build-list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 14 3 6 #"length"
0 0 4 3 1 #" "
0 0 14 3 10 #"pointlists"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 15 3 6 #"lambda"
0 0 22 3 1 #"("
0 0 14 3 1 #"y"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 14 3 1 #"y"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 14 3 4 #"plot"
0 0 4 3 1 #" "
0 0 14 3 9 #"newpoints"
0 0 4 3 1 #" "
0 0 22 3 7 #"#:x-min"
0 0 4 3 1 #" "
0 0 14 3 4 #"xmin"
0 0 4 3 1 #" "
0 0 22 3 7 #"#:x-max"
0 0 4 3 1 #" "
0 0 14 3 4 #"xmax"
0 0 4 3 1 #" "
0 0 22 3 7 #"#:y-min"
0 0 4 3 1 #" "
0 0 14 3 4 #"ymin"
0 0 4 3 1 #" "
0 0 22 3 7 #"#:y-max"
0 0 4 3 1 #" "
0 0 14 3 4 #"ymax"
0 0 22 3 4 #"))))"
0           0
